<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于自媒体旅游信息使用特征分析问卷</title>
      <link href="/2020/03/11/%E5%9F%BA%E4%BA%8E%E8%87%AA%E5%AA%92%E4%BD%93%E6%97%85%E6%B8%B8%E4%BF%A1%E6%81%AF%E4%BD%BF%E7%94%A8%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90%E9%97%AE%E5%8D%B7/"/>
      <url>/2020/03/11/%E5%9F%BA%E4%BA%8E%E8%87%AA%E5%AA%92%E4%BD%93%E6%97%85%E6%B8%B8%E4%BF%A1%E6%81%AF%E4%BD%BF%E7%94%A8%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90%E9%97%AE%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="基于自媒体旅游信息使用特征分析问卷"><a href="#基于自媒体旅游信息使用特征分析问卷" class="headerlink" title="基于自媒体旅游信息使用特征分析问卷"></a>基于自媒体旅游信息使用特征分析问卷</h1><ul><li><strong>传播学拉斯维尔5W理论</strong></li></ul><table><thead><tr><th align="center">五种基本要素</th><th align="left">内容</th></tr></thead><tbody><tr><td align="center">传播主体</td><td align="left">传播活动的起点，自媒体创作者</td></tr><tr><td align="center">传播内容</td><td align="left">它包括特定内容和传播方式两部分</td></tr><tr><td align="center">传播受众</td><td align="left">主动的信息接收者、信息再加工的传播者和传播活动的反馈源</td></tr><tr><td align="center">传播媒介</td><td align="left">传播信息符号的物质实体，报纸、杂志、广播、电视、电影、书籍等</td></tr><tr><td align="center">传播效果</td><td align="left">传播者发出的信息经媒介传至受众而引起受众思想观念、行为方式等的变化</td></tr></tbody></table><a id="more"></a><h2 id="第一部分：基本信息"><a href="#第一部分：基本信息" class="headerlink" title="第一部分：基本信息"></a>第一部分：基本信息</h2><ol><li><p>您的性别</p><ul><li>男</li><li>女 </li></ul></li><li><p>您的学历</p></li><li><p>您关注的自媒体账号有</p></li><li><p>您经常使用的自媒体平台是（多选）？</p><ul><li>微博</li><li>QQ</li><li>微信（公众号）</li><li>抖音</li><li>小红书</li><li>贴吧</li><li>bilibili</li><li>其他</li></ul></li><li><p>旅游信息以哪种自媒体形式呈现最吸引您？</p><ul><li>旅游日志</li><li>旅游攻略</li><li>旅游短视频</li><li>长视频（vlog）</li><li>图片分享 </li></ul></li><li><p>哪些网络媒体对您的出游决策影响最大</p><ul><li>旅游官方网站（景点景区网站）</li><li>旅游中介网站（旅行社、携程等）</li><li>自媒体旅游信息（博客、论坛、视频、头条文等）</li><li>其他</li></ul></li><li><p>您会因精彩的自媒体内容而为旅游目的地确定计划吗？</p><ul><li>会</li><li>不会</li></ul></li><li><p>您会在自媒体平台转发互动评论或咨询以获取更准确的旅游信息吗？</p><ul><li>会</li><li>不会</li></ul></li></ol><h2 id="第二部分：分析自媒体旅游文化传播和营销的影响因素"><a href="#第二部分：分析自媒体旅游文化传播和营销的影响因素" class="headerlink" title="第二部分：分析自媒体旅游文化传播和营销的影响因素"></a>第二部分：分析自媒体旅游文化传播和营销的影响因素</h2><p><code>1-不同意 2-比较不同意 3-一般/不确定 4-比较同意 5-完全不同意</code></p><ol><li>博主的推荐、经历对我的旅游计划有很大帮助</li><li>我会对自媒体帐号发布的旅游相关产品/信息感兴趣</li><li>我会安照微博等自媒体上博主推荐的吃、住、行、游、购、娱进行旅游消费</li><li>我会关注该自媒体账号发布的旅游信息的真实程度</li><li>具有创意的自媒体内容更容易使我产生分享转发行为</li><li>我会与相关爱好者组群或加入群组一起讨论</li><li>我会关注自媒体旅游信息中相关产品的价格信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python正则表达式的使用</title>
      <link href="/2020/03/04/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/04/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把一些在B站上学的一些东西记录下来Post到博客上方便回忆。本期是Python正则表达式的使用，B站链接<a href="https://www.bilibili.com/video/av7036891?from=search&seid=2112145811694806899" target="_blank" rel="noopener">详解Python正则表达式</a>, 视频原作者：<a href="https://space.bilibili.com/24014925?spm_id_from=333.788.b_636f6d6d656e74.9" target="_blank" rel="noopener">正月点灯笼</a>，作者的油管：<a href="https://www.youtube.com/user/tpof314/videos" target="_blank" rel="noopener">黄浩杰的YouTube</a>。他人声音好听，不断让我想继续听下去哈哈。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;视频的的诗歌文本（要玩的复制文本保存为 poem.txt 开车吧）<a href="http://members.iinet.net.au/~newtoy/snowyriver.htm" target="_blank" rel="noopener">THE MAN FROM SNOWY RIVER</a><br>首先，打开poem愉快地开始</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re </span><br><span class="line"></span><br><span class="line"><span class="keyword">text</span> = <span class="string">''</span></span><br><span class="line"><span class="built_in">file</span> = <span class="built_in">open</span>(<span class="string">'poem .txt'</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="built_in">file</span>:</span><br><span class="line">    <span class="keyword">text</span> = <span class="keyword">text</span> + <span class="built_in">line</span></span><br><span class="line"><span class="built_in">file</span>.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><h3 id="找数字是’-d-‘"><a href="#找数字是’-d-‘" class="headerlink" title="找数字是’ \d ‘"></a>找数字是’ \d ‘</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result_num</span> = re.findall(<span class="string">'\d'</span>, text)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;输出结果 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span> 但数字是分开的</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;还可以指定</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result_num = re.findall('<span class="tag">\<span class="name">d</span><span class="string">[2,3]</span></span>', text) </span><br><span class="line"><span class="tag">\<span class="name">d</span><span class="string">[2]</span></span>  要求匹配到两个数字  <span class="tag">\<span class="name">d</span><span class="string">[2，3]</span></span> 可以匹配二到三个数字</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;输出结果</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'12</span>']</span><br></pre></td></tr></table></figure><h3 id="‘-‘-表示至少有一个字符"><a href="#‘-‘-表示至少有一个字符" class="headerlink" title="‘ + ‘ 表示至少有一个字符"></a>‘ + ‘ 表示至少有一个字符</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; a+ 就是会匹配到 aa/aaa/asc/addddd…等等</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result_num</span> = re.findall(<span class="string">'a+'</span>, text)</span><br></pre></td></tr></table></figure><h3 id="‘-w-‘-表示匹配任意一个字母-等同-A-Za-z"><a href="#‘-w-‘-表示匹配任意一个字母-等同-A-Za-z" class="headerlink" title="‘ \w ‘ 表示匹配任意一个字母 等同 [A-Za-z]"></a>‘ \w ‘ 表示匹配任意一个字母 等同 [A-Za-z]</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result_num</span> = re.findall(<span class="string">'\w'</span>, text)</span><br></pre></td></tr></table></figure><h3 id="用findall函数从text中找给定条件的词组并保存在result中"><a href="#用findall函数从text中找给定条件的词组并保存在result中" class="headerlink" title="用findall函数从text中找给定条件的词组并保存在result中"></a>用findall函数从text中找给定条件的词组并保存在result中</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">final_result = <span class="builtin-name">set</span>()</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> pair[0] <span class="keyword">not</span> <span class="keyword">in</span> final_result: # ([Aa][a-z][a-z]) →左边的规则</span><br><span class="line">        final_result.<span class="builtin-name">add</span>(pair[0]) #list用append，set用add</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pair[1] <span class="keyword">not</span> <span class="keyword">in</span> final_result:</span><br><span class="line">        final_result.<span class="builtin-name">add</span>(pair[1])</span><br><span class="line"></span><br><span class="line">final_result.<span class="builtin-name">remove</span>(<span class="string">''</span>) #把空字符去掉</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(final_result)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = re.findall(' ([<span class="string">Aa</span>][<span class="symbol">a-z</span>][<span class="string">a-z</span>]) |([<span class="string">A</span>][<span class="symbol">a-z</span>][<span class="string">a-z</span>]) ', text)</span><br><span class="line">result = set(result) </span><br><span class="line"><span class="section">#set（set里面不包含重复元素） 把列表转化为集合，集合内没有重复元素</span></span><br></pre></td></tr></table></figure><h4 id="‘-Aa-a-z-a-z-A-a-z-a-z-‘-‘-‘：或者，或者匹配大写字母A前面不带空格的三个字母"><a href="#‘-Aa-a-z-a-z-A-a-z-a-z-‘-‘-‘：或者，或者匹配大写字母A前面不带空格的三个字母" class="headerlink" title="‘ ([Aa][a-z][a-z]) |([A][a-z][a-z]) ‘   ‘ | ‘：或者，或者匹配大写字母A前面不带空格的三个字母"></a>‘ ([Aa][a-z][a-z]) |([A][a-z][a-z]) ‘   ‘ | ‘：或者，或者匹配大写字母A前面不带空格的三个字母</h4><p>输出结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(final_result)</span></span></span><br></pre></td></tr></table></figure> <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;('', 'And'), ('and', ''), ('air', ''), ('are', '')&#125; 结果带有空集</span><br></pre></td></tr></table></figure><h4 id="其他指定条件"><a href="#其他指定条件" class="headerlink" title="其他指定条件"></a>其他指定条件</h4> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">result</span> = re.findall(<span class="string">' [a-z] '</span>, text)</span><br></pre></td></tr></table></figure> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[a-z] 表示一个a-z中任意一个字符</span><br><span class="line">a[a-z]c 表示aac/abc/a.c/ </span><br><span class="line">a[<span class="string">a-z</span>][<span class="symbol">a-z</span>] 过滤掉中间带空格的字母</span><br><span class="line">' a[<span class="string">a-z</span>][<span class="symbol">a-z</span>] '  前后有空格过滤掉带有其他字母单词的</span><br><span class="line">' (a[<span class="string">a-z</span>][<span class="symbol">a-z</span>]) ' 加括号表示我只要左右没有空格的三个字母→'and'</span><br><span class="line">' ([<span class="string">Aa</span>][<span class="symbol">a-z</span>][<span class="string">a-z</span>]) ' 想要包含大写字母A开头的→[Aa] 但有些前面并没有空格And没有取到</span><br><span class="line">a<span class="emphasis">* 匹配 a /aa/aaa/aaaa/aaaaa/...  *</span> 可以匹配一个或多个或没有，代表任意一个字符</span><br><span class="line">' <span class="emphasis">*([Aa][a-z][a-z]) '  【' *</span>】前面可以有空格或没有空格或有多个空格</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>得多点时间看看视频会议比较ok，先记个笔记ok~</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import re #正则表达式引入</span><br><span class="line"></span><br><span class="line">text = ''</span><br><span class="line">file = open('poem .txt')</span><br><span class="line">for line in file:</span><br><span class="line"><span class="code">    text = text + line</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">result_num = re.findall('\w', text)</span><br><span class="line"><span class="section">#找数字是\d 但是数字是分开的 →['1', '2', '3']</span></span><br><span class="line"><span class="section"># + 表示至少有一个字符 a+ 就是 aa/aaa/asc/addddd...</span></span><br><span class="line"><span class="section">#\d[2]  要求匹配到两个数字  \d[2，3] 可以匹配二到三个数字</span></span><br><span class="line"><span class="section">#\w 表示匹配任意一个字母 等同 [A-Za-z]</span></span><br><span class="line">print(result_num)</span><br><span class="line"></span><br><span class="line">result = re.findall(' [a-z] ', text) #用findall函数从text中找包含to并保存在result中 正则表达式中“. ?”a..</span><br><span class="line"><span class="section"># 表示一个字符</span></span><br><span class="line">result = set(result) #set（set里面不包含重复元素） 把列表转化为集合，集合内没有重复元素</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">一定要全英文键盘输入</span><br><span class="line">[a-z] 表示一个a-z中任意一个字符</span><br><span class="line">a[a-z]c 表示aac/abc/a.c/ </span><br><span class="line">a[<span class="string">a-z</span>][<span class="symbol">a-z</span>] 过滤掉中间带空格的字母</span><br><span class="line">' a[<span class="string">a-z</span>][<span class="symbol">a-z</span>] ' 前后有空格过滤掉带有其他字母单词的 →' and '</span><br><span class="line">' (a[<span class="string">a-z</span>][<span class="symbol">a-z</span>]) ' 加括号表示我只要左右没有空格的三个字母→'and'</span><br><span class="line">result = set(result) 去掉重复的词</span><br><span class="line">' ([<span class="string">Aa</span>][<span class="symbol">a-z</span>][<span class="string">a-z</span>]) ' 想要包含大写字母A开头的→[Aa] 但有些前面并没有空格And没有取到</span><br><span class="line">a<span class="emphasis">* 匹配→ a /aa/aaa/aaaa/aaaaa/...  *</span>可以匹配一个或多个或没有，代表任意一个字符</span><br><span class="line">' <span class="emphasis">*([Aa][a-z][a-z]) '  【' *</span>】前面可以有空格或没有空格或有多个空格</span><br><span class="line">' ([<span class="string">Aa</span>][<span class="symbol">a-z</span>][<span class="string">a-z</span>]) |([<span class="string">A</span>][<span class="symbol">a-z</span>][<span class="string">a-z</span>]) ' 【|】或者匹配大写字母A前面不带空格的三个字母</span><br><span class="line"><span class="code">    →&#123;('', 'And'), ('and', ''), ('air', ''), ('are', '')&#125; 结果带有空集</span></span><br><span class="line"><span class="code">          </span></span><br><span class="line">"""</span><br><span class="line">final_result = set()</span><br><span class="line">for pair in result:</span><br><span class="line"><span class="code">    if pair[0] not in final_result: # ([Aa][a-z][a-z]) →左边的规则</span></span><br><span class="line"><span class="code">        final_result.add(pair[0]) #list用append，set用add</span></span><br><span class="line"></span><br><span class="line"><span class="code">    if pair[1] not in final_result:</span></span><br><span class="line"><span class="code">        final_result.add(pair[1])</span></span><br><span class="line"></span><br><span class="line"><span class="section">#final_result.remove('') #把空字符去掉</span></span><br><span class="line"></span><br><span class="line">print(final_result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2020/02/29/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2020/02/29/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="知否知否"><a href="#知否知否" class="headerlink" title="知否知否"></a>知否知否</h1><p>这是一篇描述这两天的事情，论文不太会写，就搭建起博客写一些东西培养下自己的写的能力吧，感觉自己写东西的能力缺少逻辑、思想，脑袋跟不上潮流（大实话），先从这里开始！start。</p><a id="more"></a><h2 id="2月28日"><a href="#2月28日" class="headerlink" title="2月28日"></a>2月28日</h2><p>&emsp;&emsp;这一天我竟然搞了一下午博客的搭建，之前我已经通过谷歌云赠送的300刀建立了WordPress的博客 <a href="https://aisamsweb.ml" target="_blank" rel="noopener">https://aisamsweb.ml</a> ，想想如果想长期使用的话服务器还需要不断去付费，不太长久，于是便使用GitHub搭建起我的另一个博客，博客的域名 <a href="http://www.bokuosusume.tk">http://www.bokuosusume.tk</a> 我觉得有意思，bokuosusume 是我在动漫鬼灭之刃的OP中听到的一句歌词，其实博客的搭建并不是很难，花不上 1 小时就建设好了，只是我很想把博客给美化下，把博客变得好看些，最终选择了 melody 主题。搭建之后我选择了绑定 freenom 的免费域名，可能是由于 freenom 的功能限制吧，设置好DNS后发现，只能用  <a href="http://www.bokuosusume.tk">www.bokuosusume.tk</a>  来访问我的博客，东搞西搞还是没能解决掉通过 bokuosusume.tk 访问不到的问题，折腾就这样进行了一个下午。<br>&emsp;&emsp;当天晚上一直在添加博客的功能，添加评论系统，结果发现使用 Gitment 和 Gittalk 都无法成功显示评论，期间各种设置竟然出现登录 GitHub 授权提示错误，无法登录、点击登录跳回首页的麻烦，去Google、百度之后还是无法解决，便选择laibili的评论，使用的时候问题来了，注册 Laibili感觉很玄学，注册期间验证码验证错误，各种注册问题出现，最终偶然试试登录才发现注册成功了，成功给博客加上评论系统，搭建博客还是挺不容易的。</p><h2 id="2月29日"><a href="#2月29日" class="headerlink" title="2月29日"></a>2月29日</h2><p>&emsp;&emsp;这两天我已经是冒着论文还完不成的风险捣腾博客了（这是论文不会写的借口吧），hexo 的写文章感觉还挺麻烦，贴图感觉比较复杂，Markdown的编辑器找了找看见有大佬推荐 HexoEditor ，我在按照大佬安装教程安装的过程中彻底懵逼了，git 仓库网速慢得要死（明明已经全局代理了），npm install又产生了什么错误，重复又重复还是失败，然后就没有然后了，就不用了便是，这篇文章用的Notepad++来编辑的。今天，我终于解决掉域名的访问问题了，去注册 cloudfare 把域名的解析交给它，成功能通过 bokuosusume.tk 来访问我的博客，问题解决！<br>&emsp;&emsp;每个博客的问题能解决算是给自己的一点小鼓励，之前通过写 python 脚本，一键进行学校每天需要上报体温信息签到，不用太麻烦去手动进入万恶的易班点来点去了，每解决一步问题心情却是很激动，我希望下一步，我能解决论文问题，解决hexo博客的其他问题，加油，奥利给。</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
